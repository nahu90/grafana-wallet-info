{{ $CurrentContainer := where $ "ID" .Docker.CurrentContainerID | first }}
{{ $api_default_host := or ($CurrentContainer.Env.API_DEFAULT_HOST) "" }}
{{ $react_default_host := or ($CurrentContainer.Env.REACT_DEFAULT_HOST) "null" }}
{{ $is_production_deploy := or ($CurrentContainer.Env.IS_PRODUCTION_DEPLOY) "false" }}

daemon off;
worker_processes 4;
events{
    worker_connections 4096;
}

http{
client_max_body_size 25M;
proxy_connect_timeout 120s;
proxy_read_timeout 120s;

{{ define "upstream" }}
    {{ if .Address }}
        {{/* If we got the containers from swarm and this container's port is published to host, use host IP:PORT */}}
        {{ if and .Container.Node.ID .Address.HostPort }}
            # {{ .Container.Node.Name }}/{{ .Container.Name }}
            server {{ .Container.Node.Address.IP }}:{{ .Address.HostPort }};
        {{/* If there is no swarm node or the port is not published on host, use container's IP:PORT */}}
        {{ else if .Network }}
            # {{ .Container.Name }}
            server {{ .Network.IP }}:{{ .Address.Port }};
        {{ end }}
    {{ else if .Network }}
        # {{ .Container.Name }}
        server {{ .Network.IP }} down;
    {{ end }}
{{ end }}

{{ range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" "," }}
    {{ if eq $host "backend" "frontend"}}
         upstream {{ $host }} {
         {{ range $container := $containers }}
             {{ $addrLen := len $container.Addresses }}

             {{ range $knownNetwork := $CurrentContainer.Networks }}
                 {{ range $containerNetwork := $container.Networks }}
                     {{ if eq $knownNetwork.Name $containerNetwork.Name }}
                         ## Can be connect with "{{ $containerNetwork.Name }}" network

                         {{/* If only 1 port exposed, use that */}}
                         {{ if eq $addrLen 1 }}
                             {{ $address := index $container.Addresses 0 }}
                             {{ template "upstream" (dict "Container" $container "Address" $address "Network" $containerNetwork) }}
                         {{/* If more than one port exposed, use the one matching VIRTUAL_PORT env var, falling back to standard web port 80 */}}
                         {{ else }}
                             {{ $port := coalesce $container.Env.VIRTUAL_PORT "80" }}
                             {{ $address := where $container.Addresses "Port" $port | first }}
                             {{ template "upstream" (dict "Container" $container "Address" $address "Network" $containerNetwork) }}
                         {{ end }}
                     {{ end }}
                 {{ end }}
             {{ end }}
         {{ end }}
         }
    {{ end }}
{{ end }}

server {
    listen 80;
    server_name {{ $api_default_host }};
    charset utf-8;

    access_log /proc/self/fd/1;
    error_log /proc/self/fd/2;

    location /static {
        autoindex off;
        include /etc/nginx/mime.types;
        alias /usr/src/app/static;
        gzip             on;
        gzip_min_length  1000;
        gzip_types      application/x-javascript text/css;
        if ($request_filename ~* \.(ico|css|js|gif|jpe?g|png)$) {
               expires 72h;
        }
    }

    # media
    location /protected_media {
        internal; # only allowed for internal redirects
        alias /usr/src/app/media;
        include /etc/nginx/mime.types;
    }

    location / {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto http;
        proxy_set_header Host $http_host;
        proxy_redirect off;

        if (!-f $request_filename) {
            proxy_pass http://backend;
            break;
        }
    }
}

{{ if eq $react_default_host "null" }}
{{ else }}
server {
    listen 80;
    server_name {{ $react_default_host }};
    charset utf-8;

    location / {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto http;
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;

        proxy_pass http://frontend;
    }
}
{{ end }}

{{ if eq $api_default_host "api.localhost" }}
server {
    server_name www.{{ $api_default_host }};
    return 301 $scheme://{{ $api_default_host }}$request_uri;
}

server {
    listen 80 default_server;
    return 500;
}
{{ end }}

} ## http close
